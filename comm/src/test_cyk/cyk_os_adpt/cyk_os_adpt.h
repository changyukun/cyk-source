/*****************************************************************************
File Name   :  cyk_os_adpt.h

Description :  

     Author   :  changyukun

*****************************************************************************/

#ifndef __HL_OS_ADPT_H__
#define __HL_OS_ADPT_H__



#ifdef __cplusplus
#if __cplusplus
extern "C"{
#endif
#endif 



#define OS_LINUX/* 操作系统类型选择*/

#ifdef OS_LINUX/*............. st linux system.....................................................................................................................................................*/

#include <limits.h>
#include <pthread.h>
#include <semaphore.h>
#include <mqueue.h>
#include <sys/stat.h>
#include <time.h>
#include "cyk_os_adpt_list.h"
#include <errno.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sched.h>
#include <string.h>
#include <stdlib.h>

//-----  数据类型定义--------------------------------------
typedef pthread_t 		hl_task_t;
typedef sem_t 			hl_sem_t;
typedef mqd_t 			hl_mq_t;
typedef pthread_mutex_t 	hl_mutex_t;
typedef clock_t 			hl_clock_t;
typedef pthread_cond_t 	hl_pthread_cond_t;
typedef size_t			hl_size_t;
typedef pid_t				hl_pid_t;

//-----  数据结构定义--------------------------------------



//-----  宏定义-----------------------------------------------
#define OS_TIMEOUT_INFINITY    	(0)
#define OS_TIMEOUT_IMMEDIATE 	(-1)

#define hl_printf(x) 			printf x

#elif defined(OS_LINUX_ST)/*............. st linux system..........................................................................................................................................*/

#include <pthread.h>
#include <semaphore.h>
#include <mqueue.h>
#include <sys/stat.h>
#include <time.h>
#include "cyk_os_adpt_list.h"
#include <errno.h>
#include <sys/time.h>
#include <sys/resource.h>
#include "stapp_main.h"

//-----  数据类型定义--------------------------------------
typedef STOS_Task_t 				hl_task_t;
typedef sem_t 					hl_sem_t;
typedef STOS_MessageQueue_t 		hl_mq_t;
typedef pthread_mutex_t 			hl_mutex_t;
typedef clock_t 					hl_clock_t;
typedef pthread_cond_t 			hl_pthread_cond_t;
typedef size_t					hl_size_t;
typedef pid_t						hl_pid_t;


//-----  数据结构定义--------------------------------------



//-----  宏定义-----------------------------------------------
#define OS_TIMEOUT_INFINITY    	(0)
#define OS_TIMEOUT_IMMEDIATE 	(-1)

#define hl_printf(x) 			printf x

#elif defined(OS_ECOS)/*............. ecos system..................................................................................................................................................*/


#elif defined(OS_OS21)/*............. os21 system..................................................................................................................................................*/


#endif










//=======  以下定义与系统无关==========================================================================================
typedef struct hl_task_elemet_s
{
	char 			task_name[50];
	hl_task_t 		tid;
	hl_mutex_t 		mutex;
	hl_pthread_cond_t 	cond;
	struct list_head 	stNode;
}hl_task_elemet_t;

typedef struct hl_mq_elemet_s
{
	char 			mq_name[50];
	hl_mq_t 			mq_t;
	void*			priv;
	struct list_head 	stNode;
}hl_mq_elemet_t;







//====================pthread function===========================================================================================

//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、Function		: [in] 线程函数
		2、Param		: [in] 对应线程函数的参数
		3、Task		: [in/out] 用于保存线程ID 
		4、Priority		: [in] 线程的优先级别
		5、Name		: [in] 线程的名字
		6、StackSize	: [in] 线程使用的堆栈大小( 单位字节)
		7、pStack		: [in] 线程使用的堆栈指针
		8、priv			: [in/out] 私有数据，根据不同的操作系统可能有特殊的参数、或者需要返回特殊的信息

	返回:
		1、0:成功  other:失败
		
	说明:
		1、
*/
int hl_task_create(void(*Function)(void* Param), void* Param,hl_task_t** Task,int Priority,const char* Name,int StackSize,void* pStack, void* priv);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、Task	: [in] 线程ID 

	返回:
		1、0:成功  other:失败
		
	说明:
		1、
*/
int hl_task_delete(hl_task_t* Task);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、
		
	返回:
		1、返回调用线程的ID 
		
	说明:
		1、
*/
hl_task_t  hl_task_selfid(void);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、tname	: [in] 线程名字
		
	返回:
		1、成功返回线程ID, 失败返回0
		
	说明:
		1、
*/
hl_task_t hl_task_id(char *tname);


//-------------------------------------------------------------------------------------------------
/*
	参数:
		1、
		
	返回:
		1、
		
	说明:
		1、获取线程的tid ( 同一进程下的多个线程具有相同的pid，但具有不同的tid，如用linux 下
			命令ps -eo %cpu,tid,time 即可看到同一个进程下的每个线程的tid，从而实现了将代码中用
			pthread_create 创建的线程与ps 、top 命令等看到的各个线程实现一一对应)
*/
hl_pid_t get_tid(void);


//-------------------------------------------------------------------------------------------------
/*
	参数:
		1、
		
	返回:
		1、
		
	说明:
		1、获取线程的pid ( 即获得所属于进程的pid )
*/
hl_pid_t get_pid(void);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、tid	: [in] 线程ID
		
	返回:
		1、成功返回线程名字符串, 失败返回NULL
		
	说明:
		1、
*/
char*  hl_task_name(hl_task_t *tid);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、tid	: [in] 线程ID

	返回:
		1、0:成功  other:失败
		
	说明:
		1、
*/
int  hl_task_suspendself(hl_task_t *tid);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、tid	: [in] 线程ID

	返回:
		1、0:成功  other:失败
		
	说明:
		1、
*/
int  hl_task_resume(hl_task_t *tid);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、

	返回:
		1、0:成功  other:失败
		
	说明:
		1、获取线程数量( 由函数hl_task_create 创建的线程数量)
*/
int hl_task_getcount(void);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、

	返回:
		1、
		
	说明:
		1、打印所有线程信息( 由函数hl_task_create 创建的线程数量)
*/
void hl_task_print();






//====================semahore function==========================================================================================

//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、value	: 传入信号量的初始值

	返回:
		1、返回信号量指针
		
	说明:
		1、创建一个信号量
*/
hl_sem_t * hl_sem_create( int value);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、sem_p	: 传入信号量的指针

	返回:
		1、0:成功  other:失败
		
	说明:
		1、删除一个信号量
*/
int hl_sem_delete( hl_sem_t *sem_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、sem_p	: 传入信号量的指针

	返回:
		1、0:成功  other:失败
		
	说明:
		1、发送一个信号量
*/
int hl_sem_signal(hl_sem_t * sem_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、sem_p	: 传入信号量的指针

	返回:
		1、0:成功  other:失败
		
	说明:
		1、等待一个信号量
*/
int hl_sem_wait(hl_sem_t * sem_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、sem_p		: 传入信号量的指针
		2、millisecond_p	: 传入超时时间

	返回:
		1、0:成功  other:失败
		
	说明:
		1、超时等待一个信号量
*/
int hl_sem_waittimeout(hl_sem_t * sem_p, hl_clock_t * millisecond_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、sem_p	: 传入信号量的指针
		2、value	: 用于返回信号量值

	返回:
		1、0:成功  other:失败
		
	说明:
		1、获取信号量值
*/
int hl_sem_getvalue(hl_sem_t *sem_p, int *value);






//====================mutex function=============================================================================================

//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mt_p	: 用于返回互斥锁

	返回:
		1、0:成功  other:失败
		
	说明:
		1、创建一个互斥锁
*/
int hl_mutex_create(hl_mutex_t *mt_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mt_p	: 传入互斥锁指针

	返回:
		1、0:成功  other:失败
		
	说明:
		1、注销互斥锁
*/
int hl_mutex_destroy(hl_mutex_t *mt_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mt_p	: 传入互斥锁指针

	返回:
		1、0:成功  other:失败
		
	说明:
		1、锁定
*/
int hl_mutex_lock(hl_mutex_t *mt_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mt_p	: 传入互斥锁指针

	返回:
		1、0:成功  other:失败
		
	说明:
		1、解锁
*/
int hl_mutex_unlock(hl_mutex_t *mt_p);







//====================message function===========================================================================================

//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、element_size	: 传入每个消息体的大小( 字节)
		2、no_elements	: 传入消息体的个数

	返回:
		1、NULL:失败, 成功返回消息队列的句柄
		
	说明:
		1、
*/
hl_mq_t * hl_mq_create(hl_size_t element_size, unsigned int no_elements);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mq_p	: 传入消息队列的句柄

	返回:
		1、0:成功  other:失败
		
	说明:
		1、注销一个消息队列
*/
int hl_mq_delete(hl_mq_t * mq_p);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mq_p	: 传入消息队列的句柄
		2、msg_p	: 传入待发送的消息数据
		3、msg_size	: 传入消息数据的大小( 字节)

	返回:
		1、0:成功  other:失败
		
	说明:
		1、发送一个消息
*/
int hl_mq_send(hl_mq_t * mq_p, void * msg_p, hl_size_t msg_size);	


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mq_p	: 传入消息队列的句柄
		2、msg_p	: 用于返回消息数据的buffer
		3、msg_size	: 传入用于返回消息数据buffer 的大小( 字节)

	返回:
		1、0:成功  other:失败
		
	说明:
		1、阻塞接收一个消息
*/
int hl_mq_receive (hl_mq_t* mq_p, void * msg_p, hl_size_t msg_size);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、mq_p		: 传入消息队列的句柄
		2、msg_p		: 用于返回消息数据的buffer
		3、msg_size		: 传入用于返回消息数据buffer 的大小( 字节)
		4、millisecond_p	: 传入超时时间( 单位: 毫秒 OS_TIMEOUT_INFINITY : 无限等待 OS_TIMEOUT_IMMEDIATE : 不等待)

	返回:
		1、0:成功  other:失败
		
	说明:
		1、超时接收一个消息
*/
int hl_mq_receivetimeout(hl_mq_t* mq_p , void * msg_p, hl_size_t msg_size, int millisecond_p);








//====================memory function===========================================================================================

//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、size	 : 传入待申请内存空间的大小

	返回:
		1、NULL : 失败  otehr : 成功
		
	说明:
		1、申请内存
*/
void* hl_malloc(int size);


//-------------------------------------------------------------------------------------------------	
/*
	参数:
		1、pbuf	 : 传入待释放指针

	返回:
		1、
		
	说明:
		1、释放内存
*/
void hl_free(void* pbuf);


















#ifdef __cplusplus
#if __cplusplus
}
#endif
#endif 

#endif 



